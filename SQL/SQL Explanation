**1. Total Debt**

SELECT COUNT(id) AS Total_Debt<br>
FROM `loan portfolio management and performance`.financial_loan;

**Explanation:**<br>
**•	Purpose:** Calculates the total number of loans (debts) in the financial_loan table.<br>
**•	COUNT(id):** Counts all non-null id values, representing each loan record.<br>
**•	Alias:** The result is labeled as Total_Debt for clarity.
________________________________________
**2. Total Debt MTD (Month-to-Date)**


SELECT COUNT(id) AS Total_Debt_M12 <br>
FROM `loan portfolio management and performance`.financial_loan <br>
WHERE MONTH(`issue_date`) = 12;

**Explanation:**<br>
**•	Purpose:** Counts the total number of loans issued in the month of December.<br>
**•	MONTH(issue_date) = 12:** Filters loans where the issue month is December.<br>
**•	Alias:** The result is labeled as Total_Debt_M12.
________________________________________
**3. Total Debt PMTD (Previous-Month-to-Date)**


SELECT COUNT(id) AS Total_Debt_M11<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE MONTH(`issue_date`) = 11;

**Explanation:**<br>
**•	Purpose:** Counts the total number of loans issued in the previous month (November).<br>
**•	MONTH(issue_date) = 11:** Filters loans where the issue month is November.<br>
**•	Alias:** The result is labeled as Total_Debt_M11.
________________________________________
**4. Total Funds**


SELECT SUM(`loan_amount`) AS Total_Funds<br>
FROM `loan portfolio management and performance`.financial_loan;<br>

**Explanation:**<br>
**•	Purpose:** Calculates the total amount of funds loaned out.<br>
**•	SUM(loan_amount):** Sums up all loan amounts in the table.<br>
**•	Alias:** The result is labeled as Total_Funds.
________________________________________
**5. Total Funds MTD (Month-to-Date)**


SELECT SUM(`loan_amount`) AS Total_Funds_M12<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE MONTH(`issue_date`) = 12;

**Explanation:**<br>
**•	Purpose:** Calculates the total loan amount issued in December.<br>
**•	MONTH(issue_date) = 12:** Filters loans issued in December.<br>
**•	Alias:** The result is labeled as Total_Funds_M12.
________________________________________
**6. Total Funds PMTD (Previous-Month-to-Date)**


SELECT SUM(`loan_amount`) AS Total_Funds_M11<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE MONTH(`issue_date`) = 11;

**Explanation:**<br>
**•	Purpose:** Calculates the total loan amount issued in November.<br>
**•	MONTH(issue_date) = 11:** Filters loans issued in November.<br>
**•	Alias:** The result is labeled as Total_Funds_M11.
________________________________________
**7. Total Good Debt**


SELECT SUM(<br>
    CASE<br>
        WHEN `loan_status` = 'Fully Paid' OR `loan_status` = <br>'Current' THEN 1<br>
        ELSE 0<br>
    END<br>
) AS Total_Good_Debt<br>
FROM `loan portfolio management and performance`.financial_loan;<br>

**Explanation:**<br>
**•	Purpose:** Counts the number of loans that are either fully paid or currently being paid (considered good debts).<br>
**•	CASE WHEN:** Assigns a value of 1 to good loans and 0 otherwise.<br>
**•	SUM(...):** Adds up the total number of good loans.<br>
**•	Alias:** The result is labeled as Total_Good_Debt.
________________________________________
**8. Total Good Funds**


SELECT SUM(`loan_amount`) AS Total_Good_Funds<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE `loan_status` = 'Fully Paid' OR `loan_status` = 'Current';

**Explanation:**<br>
**•	Purpose:** Calculates the total loan amount for loans that are fully paid or currently active.<br>
**•	WHERE:** Filters loans with statuses of 'Fully Paid' or 'Current'.<br>
**•	Alias:** The result is labeled as Total_Good_Funds.
________________________________________
**9. Percent of Good Debt**


SELECT (<br>
    SUM(<br>
        CASE<br>
            WHEN `loan_status` = 'Fully Paid' OR `loan_status` = 'Current' THEN 1<br>
            ELSE 0<br>
        END<br>
    ) / COUNT(`id`)<br>
) * 100 AS Percent_Good_Debt<br>
FROM `loan portfolio management and performance`.financial_loan;

**Explanation:**<br>
**•	Purpose:** Calculates the percentage of loans that are considered good debts.<br>
**•	SUM(CASE...)/COUNT(id): **Divides the number of good loans by the total number of loans.<br>
**•	* 100:** Converts the ratio to a percentage.<br>
**•	Alias:** The result is labeled as Percent_Good_Debt.
________________________________________
**10. Percent of Good Funds**


SELECT<br> (
    SUM(`loan_amount`) / (SELECT SUM(`loan_amount`) FROM financial_loan)
) * 100 AS Percent_Good_Funds<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE `loan_status` = 'Fully Paid' OR `loan_status` = 'Current';

**Explanation:**<br>
**•	Purpose:** Calculates the percentage of total loan funds that are good funds.<br>
**•	SUM(loan_amount):** Sums loan amounts of good loans.<br>
**•	(SELECT SUM(loan_amount) FROM financial_loan):** Retrieves the total loan amount across all loans.<br>
**•	Alias:** The result is labeled as Percent_Good_Funds.
________________________________________
**11. Total Good Debt and Funds MTD (Month-to-Date)**


SELECT<br>
    SUM(<br>
        CASE<br>
            WHEN `loan_status` = 'Fully Paid' OR `loan_status` = 'Current' THEN 1<br>
            ELSE 0<br>
        END<br>
    ) AS Total_Good_Debt_M12,<br>
    SUM(`loan_amount`) AS Total_Good_Funds_M12<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE MONTH(`issue_date`) = 12;

**Explanation:**<br>
**•	Purpose:** Calculates the total number of good loans and the total good funds issued in December.<br>
**•	MONTH(issue_date) = 12:** Filters data for December.<br>
**•	Aliases:** Results are labeled as Total_Good_Debt_M12 and Total_Good_Funds_M12.
________________________________________
**12. Total Good Debt and Funds PMTD (Previous-Month-to-Date)**


SELECT<br>
    SUM(<br>
        CASE<br>
            WHEN `loan_status` = 'Fully Paid' OR `loan_status` = 'Current' THEN 1<br>
            ELSE 0<br>
        END<br>
    ) AS Total_Good_Debt_M11,<br>
    SUM(`loan_amount`) AS Total_Good_Funds_M11<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE MONTH(`issue_date`) = 11;

**Explanation:**<br>
**•	Purpose:** Calculates the total number of good loans and the total good funds issued in November.<br>
**•	MONTH(issue_date) = 11:** Filters data for November.<br>
**•	Aliases:** Results are labeled as Total_Good_Debt_M11 and Total_Good_Funds_M11.
________________________________________
**13. Total Bad Funds**<br>


SELECT SUM(`loan_amount`) AS Total_Bad_Funds<br>
FROM `loan portfolio management and performance`.financial_loan
WHERE `loan_status` = 'Charged Off';

**Explanation:**<br>
**•	Purpose:** Calculates the total loan amount for loans that have been charged off (considered bad funds).<br>
**•	WHERE loan_status = 'Charged Off':** Filters loans with a status of 'Charged Off'.<br>
**•	Alias:** The result is labeled as Total_Bad_Funds.
________________________________________
**14. Total Good Funds Compared with Bad Funds**


SELECT<br>
    SUM(`loan_amount`) AS Total_Good_Funds,<br>
    (<br>
        SELECT SUM(`loan_amount`)<br>
        FROM `loan portfolio management and performance`.financial_loan<br>
        WHERE `loan_status` = 'Charged Off'<br>
    ) AS Total_Bad_Funds<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE `loan_status` = 'Fully Paid' OR `loan_status` = 'Current';

**Explanation:**<br>
**•	Purpose:** Compares the total good funds with the total bad funds.<br>
**•	Outer Query:** Calculates total good funds.<br>
**•	Subquery:** Calculates total bad funds.<br>
**•	Aliases:** Results are labeled as Total_Good_Funds and Total_Bad_Funds.
________________________________________
**15. Percent Bad Funds**


SELECT<br>
    100 - (<br>
        SUM(`loan_amount`) / (SELECT SUM(`loan_amount`) FROM financial_loan)<br>
    ) * 100 AS Percent_Bad_Funds<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE `loan_status` = 'Fully Paid' OR `loan_status` = 'Current';

**Explanation:**<br>
**•	Purpose:** Calculates the percentage of total loan funds that are bad funds.<br>
**•	100 - (...):** Subtracts the percentage of good funds from 100% to get the bad funds percentage.<br>
**•	Alias:** The result is labeled as Percent_Bad_Funds.
________________________________________
**16. Percent Good Funds Compared with Bad Funds**


SELECT<br>
    (SUM(`loan_amount`) / (SELECT SUM(`loan_amount`) FROM financial_loan)) * 100 AS Percent_Good_Funds,<br>
    100 - (SUM(`loan_amount`) / (SELECT SUM(`loan_amount`) FROM financial_loan)) * 100 AS Percent_Bad_Funds<br>
FROM `loan portfolio management and performance`.financial_loan<br>
WHERE `loan_status` = 'Fully Paid' OR `loan_status` = 'Current';

**Explanation:**<br>
**•	Purpose:** Calculates both the percentage of good funds and bad funds.<br>
**•	First Expression:** Calculates Percent_Good_Funds.<br>
**•	Second Expression:** Calculates Percent_Bad_Funds by subtracting the good funds percentage from 100%.<br>
**•	Aliases:** Results are labeled as Percent_Good_Funds and Percent_Bad_Funds.
________________________________________
**17. Total Payment Received**


SELECT SUM(`total_payment`) AS Total_Payment_Received<br>
FROM `loan portfolio management and performance`.financial_loan;

**Explanation:**<br>
**•	Purpose:** Calculates the total payments received from all loans.<br>
**•	SUM(total_payment):** Adds up all payments made towards loans.<br>
**•	Alias:** The result is labeled as Total_Payment_Received.
________________________________________
**18. Average Interest Rate**


SELECT ROUND(AVG(`int_rate`) * 100, 2) AS AVG_int_rate<br>
FROM `loan portfolio management and performance`.financial_loan;

Explanation:<br>
**•	Purpose:** Calculates the average interest rate across all loans.<br>
**•	AVG(int_rate) * 100:** Calculates the average interest rate and converts it to a percentage.<br>
**•	ROUND(..., 2):** Rounds the result to two decimal places.<br>
**•	Alias:** The result is labeled as AVG_int_rate.
________________________________________
**19. Average Debt-to-Income (DTI) Rate**


SELECT ROUND(AVG(`dti`) * 100, 2) AS AVG_dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan;

**Explanation:**<br>
**•	Purpose:** Calculates the average debt-to-income ratio across all loans.<br>
**•	AVG(dti) * 100:** Calculates the average DTI ratio and converts it to a percentage.<br>
**•	ROUND(..., 2):** Rounds the result to two decimal places.<br>
**•	Alias:** The result is labeled as AVG_dti_rate.
________________________________________
**20. Loan Report Overview**


SELECT<br>
    EXTRACT(MONTH FROM `issue_date`) AS MONTH,<br>
    2021 AS YEAR,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY EXTRACT(MONTH FROM `issue_date`)<br>
ORDER BY MONTH;

**Explanation:**<br>
**•	Purpose:** Provides a monthly overview of loan performance metrics for the year 2021.<br>
**•	Columns:**<br>
**o	MONTH:** Extracts the month from issue_date.<br>
**o	YEAR:** Sets the year as 2021.<br>
**o	COUNT(id): **Counts the total loans per month.<br>
**o	SUM(loan_amount):** Sums total funds per month.<br>
**o	SUM(total_payment):** Sums total payments received per month.<br>
**o	AVG(int_rate) and AVG(dti):** Calculates average interest and DTI rates per month.<br>
**•	GROUP BY:** Groups data by month.<br>
**•	ORDER BY MONTH:** Orders the results by month.
________________________________________
**21. Loan Report by State**


SELECT<br>
    `address_state` AS State,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY `address_state`;

**Explanation:**<br>
**•	Purpose:** Summarizes loan performance metrics grouped by state.<br>
**•	Columns:**<br>
**o	State:** The borrower's state of residence.<br>
o	Other columns as previously explained.<br>
**•	GROUP BY address_state:** Groups data by state.
________________________________________
**22. Update Employment Length Field**


UPDATE `loan portfolio management and performance`.financial_loan<br>
SET `emp_length` = '10> years'<br>
WHERE `emp_length` LIKE '10+%';

**Explanation:**<br>
**•	Purpose:** Standardizes the employment length field for better comparison.<br>
**•	SET emp_length = '10> years':** Updates the employment length to '10> years'.<br>
**•	WHERE emp_length LIKE '10+%':** Targets records where emp_length starts with '10+'.
________________________________________
**23. Loan Report by Working Years**


SELECT<br>
    emp_length AS Working_years,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY emp_length<br>
ORDER BY Working_years;

**Explanation:**<br>
**•	Purpose:** Provides loan performance metrics grouped by the borrower's years of employment.<br>
**•	Alias:** emp_length is labeled as Working_years.<br>
**•	GROUP BY emp_length:** Groups data by employment length.<br>
**•	ORDER BY Working_years:** Orders results by working years.
________________________________________
**24. Loan Report by Grade**


SELECT<br>
    `grade`,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY `grade`<br>
ORDER BY `grade`;

**Explanation:**<br>
**•	Purpose:** Summarizes loan metrics grouped by loan grade.<br>
**•	GROUP BY grade:** Groups data by the loan grade.<br>
**•	ORDER BY grade:** Orders results by grade.
________________________________________
**25. Loan Report by Home Ownership**


SELECT<br>
    `home_ownership`,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY `home_ownership`;

**Explanation:**<br>
**•	Purpose:** Provides loan performance metrics based on borrowers' home ownership status.<br>
**•	GROUP BY home_ownership:** Groups data by home ownership categories.<br>
________________________________________
**26. Loan Report by Purpose**


SELECT<br>
    `purpose`,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY `purpose`;
**Explanation:**<br>
**•	Purpose:** Summarizes loan metrics based on the purpose of the loan.<br>
**•	GROUP BY purpose:** Groups data by loan purpose (e.g., debt consolidation, home improvement).
________________________________________
**27. Loan Report by Term**


SELECT<br>
    `term`,<br>
    COUNT(`id`) AS Total_Debt,<br>
    SUM(`loan_amount`) AS Total_Fund,<br>
    SUM(`total_payment`) AS Total_Receive,<br>
    ROUND(AVG(`int_rate`), 2) AS int_rate,<br>
    ROUND(AVG(`dti`), 2) AS dti_rate<br>
FROM `loan portfolio management and performance`.financial_loan<br>
GROUP BY `term`;<br>
**Explanation:**
**•	Purpose:** Provides loan metrics grouped by loan term length.<br>
**•	GROUP BY term:** Groups data by the term of the loan (e.g., 36 months, 60 months)

